{"version":3,"sources":["components/LoginForm/LoginForm.js","components/MessageBox/MessageBox.js","components/Messages/Messages.js","components/Chat/useChat.js","components/Chat/Chat.js","App.js","reportWebVitals.js","index.js"],"names":["LoginForm","setUserDataForChat","userNameInput","useRef","imageInput","setUserNameAndImage","name","image","trim","length","undefined","user_name","data","FormData","append","sendData","then","res","console","log","user_avatar","user_avatar_url","catch","e","options","a","axios","post","className","TextField","label","variant","margin","fullWidth","inputRef","onKeyDown","event","key","preventDefault","target","value","current","files","style","display","id","ref","type","accept","Fab","color","size","component","Button","marginLeft","onClick","MessageBox","props","useState","message","setMessage","messageRef","sendMessageClick","messageObject","userData","currentUserData","onSendMessage","autoComplete","multiline","rows","onChange","Messages","messages","List","flatMap","index","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Typography","message_text","Divider","useChat","socketRef","setMessages","useEffect","socketIOClient","transports","on","mostRecentMessages","disconnect","sendMessage","emit","Chat","App","setUserData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f6da80f.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { TextField, Fab, Button } from '@material-ui/core';\nimport AddIcon from \"@material-ui/icons/Add\";\nimport axios from \"axios\";\n\nconst LoginForm = ({setUserDataForChat}) => {\n\nconst userNameInput = useRef('');\nconst imageInput = useRef('');\n\nconst setUserNameAndImage = (name, image) => {\n    if(!name.trim().length) return false;\n    if(image === undefined) {\n        setUserDataForChat({\n            user_name: name\n        });\n    } else {\n        const data = new FormData();\n        data.append('avatar',image);\n        \n        sendData(data)\n         .then(res => {\n             console.log(res);\n            setUserDataForChat({\n              user_name: name,\n              user_avatar: res.data.user_avatar_url\n            });\n        })\n         .catch(e => {\n             console.log(e);\n         })\n    }\n}\n\n\nconst enterChatClick = () => {\n    console.log(userNameInput.current.value, imageInput.current.files[0]);\n    setUserNameAndImage(userNameInput.current.value, imageInput.current.files[0]);\n}\n\nconst sendData = async (options) => {\n    return await axios.post('http://localhost:5002/api/upload',options);\n}\n\n\nreturn (\n    <form className=\"form\">\n        <TextField\n            label=\"Enter Username\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            inputRef={userNameInput}\n            onKeyDown={event => {\n                if(event.key === \"Enter\"){\n                  event.preventDefault();\n                  setUserNameAndImage(event.target.value, imageInput.current.files[0]);\n                }\n              }}\n        />\n\n        <label>\n            <input\n                style={{display:\"none\"}}\n                id=\"upload-avatar\"\n                name=\"upload-avatar\"\n                ref={imageInput}\n                type=\"file\"\n                accept=\"image/x-png,image/gif,image/jpeg,image/png\"\n            />\n            <Fab\n                color=\"inherit\"\n                size=\"small\"\n                component=\"span\"\n                aria-label=\"add\"\n                variant=\"extended\"\n            >\n                <AddIcon /> Upload avatar\n            </Fab>\n      </label>\n      \n      <Button\n        style={{marginLeft: \"32%\"}}\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={enterChatClick}\n      >\n          Enter Chat\n      </Button>\n    </form>\n  )\n}\n\nexport default LoginForm;","import React,{useState, useRef} from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\n//renaming prop for use in the component\nconst MessageBox = (props) => {\n  const [message, setMessage] = useState(\"\");\n  const messageRef = useRef(\"\");\n\n  const sendMessageClick = () =>{\n    if(messageRef.current.value === \"\"){\n      return false;\n    }\n    const messageObject = {\n      user_name: props.userData.currentUserData.user_name,\n      user_avatar: props.userData.currentUserData.user_avatar,\n      message: messageRef.current.value\n    }\n    props.onSendMessage(messageObject);\n    setMessage(\"\");\n  }\n\n  return (\n    <form className=\"chat-form\" autoComplete=\"off\">\n      <TextField\n        id=\"standard-basic\"\n        label=\"Write your message here\"\n        margin=\"normal\"\n        multiline\n        fullWidth\n        rows=\"4\"\n        inputRef={messageRef}\n        onChange={event => setMessage(event.target.value)}\n        onKeyDown={event => {\n          if(event.key === \"Enter\"){\n            //prevents enter from being pressed\n            event.preventDefault();\n            sendMessageClick();\n          }\n        }}\n        value={message}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={sendMessageClick}\n      >\n        Send\n      </Button>\n    </form>\n  );\n};\n\nexport default MessageBox;","import React, { Fragment } from \"react\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from \"@material-ui/core/Typography\";\n\n\nconst Messages = ({messages}) =>{\n  return (\n    <List>\n      {messages.flatMap((messageObject, index) => [(\n        <ListItem alignItems=\"flex-start\" key={index}>\n          <ListItemAvatar>\n            <Avatar alt=\"Avatar alt text\" src={messageObject.user_avatar} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={messageObject.user_name}\n            secondary={\n              <Fragment>\n                <Typography\n                  component=\"span\"\n                  variant=\"body2\"\n                  color=\"textPrimary\"\n                >\n                  {messageObject.message_text}\n                </Typography>\n              </Fragment>\n            }\n          />\n        </ListItem>\n        ),<Divider variant=\"inset\" component=\"li\" key={\"divider-\"+index} />])}\n    </List>\n  )\n};\n\nexport default Messages;","import {useEffect, useState, useRef} from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst useChat = () => {\n  const socketRef = useRef();\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() =>{\n    socketRef.current = socketIOClient(\"http://localhost:5005\", {transports: ['websocket']});\n\n    socketRef.current.on(\"mostRecentMessages\", (mostRecentMessages) =>{\n        console.log(mostRecentMessages);\n      setMessages(messages => [...mostRecentMessages]);\n    });\n\n    socketRef.current.on(\"newChatMessage\",({user_name, user_avatar, message_text}) =>{\n      setMessages(messages => [...messages, {user_name: user_name, user_avatar: user_avatar, message_text: message_text}]);\n    })\n\n    return ()=>{\n      socketRef.current.disconnect();\n    }\n  },[]);\n\n  const sendMessage = (messageObject) =>{\n    socketRef.current.emit(\"newChatMessage\", messageObject)\n  }\n\n  return {messages, sendMessage};\n}\n\nexport default useChat;","import React from \"react\";\nimport MessageBox from \"../MessageBox/MessageBox\";\nimport Messages from \"../Messages/Messages\";\nimport useChat from \"./useChat\";\n\nconst Chat = (currentUserData) => {\n\n  const {messages, sendMessage} = useChat();\n  return (\n    <div>\n      <Messages\n        messages={messages}\n      />\n      <MessageBox\n        userData={currentUserData}\n        onSendMessage={message => {\n          sendMessage(message);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Chat;","import { useState } from 'react';\nimport './App.css';\nimport LoginForm from './components/LoginForm/LoginForm';\nimport Chat from \"./components/Chat/Chat\"\n\nfunction App() {\n\n  const[userData , setUserData] = useState(null);\n\n  if(userData === null) {\n    return (\n      <div className=\"container\">\n        <div className=\"container-title\">Welcome to Chat</div>\n        <LoginForm\n          setUserDataForChat={setUserData}\n        />\n      </div>\n    )\n  }\n  return (\n    <Chat\n      currentUserData={userData}\n    />\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}